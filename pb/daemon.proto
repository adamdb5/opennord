syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/any.proto";

option go_package = "github.com/adamdb5/opennord/pb";

package pb;

service Daemon {
  rpc AccountInfo (AccountRequest) returns (AccountResponse) {}                    // Implemented
  rpc Cities (CitiesRequest) returns (CitiesResponse) {}                           // Implemented
  rpc Connect (ConnectRequest) returns (Payload) {}                                // Not Implemented
  rpc Countries (CountriesRequest) returns (CountriesResponse) {}                  // Implemented
  rpc Disconnect (DisconnectRequest) returns (Payload) {}                          // Implemented
  rpc FrontendCountries (CountriesRequest) returns (FrontendCountriesResponse) {}  // Implemented
  rpc Groups (GroupsRequest) returns (GroupsResponse) {}                           // Implemented
  rpc IsLoggedIn (google.protobuf.Empty) returns (IsLoggedInResponse) {}           // Implemented
  rpc Login (LoginRequest) returns (google.protobuf.Empty) {}                      // Implemented
  rpc LoginOAuth2 (google.protobuf.Empty) returns (LoginOAuth2Response) {}         // Implemented
  rpc LoginOAuth2Callback (google.protobuf.Empty) returns (Payload) {}             // Not Implemented
  rpc Logout (google.protobuf.Empty) returns (google.protobuf.Empty) {}            // Implemented
  rpc Plans (google.protobuf.Empty) returns (PlansResponse) {}                     // Implemented
  rpc Ping (google.protobuf.Empty) returns (google.protobuf.Empty) {}              // Implemented
  rpc RateConnection (RateConnectionRequest) returns (Payload) {}                  // Implemented
  rpc Register (RegisterRequest) returns (Payload) {}                              // Implemented (not supported)
  rpc SetAutoConnect (SetAutoConnectRequest) returns (Payload) {}                  // Not Implemented
  rpc SetCyberSec (SetCyberSecRequest) returns (google.protobuf.Empty) {}          // Implemented
  rpc SetDefaults (google.protobuf.Empty) returns (google.protobuf.Empty) {}       // Implemented
  rpc SetDns (SetDNSRequest) returns (Payload) {}                                  // Not Implemented
  rpc SetFirewall (SetGenericRequest) returns (google.protobuf.Empty) {}           // Implemented
  rpc SetKillSwitch (SetKillSwitchRequest) returns (google.protobuf.Empty) {}      // Implemented
  rpc SetNotify (SetNotifyRequest) returns (Payload) {}                            // Implemented (not supported)
  rpc SetObfuscate (SetGenericRequest) returns (Payload) {}                        // Implemented
  rpc SetProtocol (SetProtocolRequest) returns (Payload) {}                        // Implemented
  rpc SetTechnology (SetTechnologyRequest) returns (Payload) {}                    // Not Implemented
  rpc SetWhitelist (SetWhitelistRequest) returns (google.protobuf.Empty) {}        // Implemented
  rpc Settings (SettingsRequest) returns (SettingsResponse) {}                     // Not Implemented
  rpc SettingsProtocols (SettingsRequest) returns (Payload) {}                     // Not Implemented
  rpc SettingsTechnologies (SettingsRequest) returns (Payload) {}                  // Not Implemented
  rpc Status (google.protobuf.Empty) returns (StatusResponse) {}                   // Implemented
  rpc SetIpv6 (SetGenericRequest) returns (Payload) {}                             // Not Implemented
}

message AccountResponse {
  AccountTypeEnum type = 1;
  string username = 2; // Unused
  string email = 3;
  string expiresAt = 4;
}

message CitiesRequest {
  ProtocolEnum protocol = 1;
  BooleanEnum obfuscate = 2;
  string country = 3;
}

message CitiesResponse {
  int32 type = 1;
  repeated string names = 2;
}

message CountriesRequest {
  ProtocolEnum protocol = 1;
  BooleanEnum obfuscate = 2;
}

message CountriesResponse {
  int32 type = 1;
  repeated string names = 2;
}

message FrontendCountry {
  string name = 1;
  string code = 2;
}

message FrontendCountriesResponse {
  repeated FrontendCountry countries = 1;
}

message IsLoggedInResponse {
  BooleanEnum isLoggedIn = 1;
}

message Bool {
  BooleanEnum value = 1;
}

message Payload {
  optional int32 type = 1;
  google.protobuf.Any data = 2;
}

message Whitelist {
  Ports ports = 1;
  repeated string subnets = 2;
}

message Ports {
  repeated int32 udp = 1;
  repeated int32 tcp = 2;
}

message ConnectRequest {
  string serverTag = 1;
  string protocol = 2;
  bool obfuscate = 3;
  bool cyberSec = 4;
  bool killSwitch = 5;
  bool dns = 6;
  bool whiteList = 7;
  bool serverGroup = 8;
  string nordLynxPrivateKey = 9;
}

message Country {
  string name = 1;
  string code = 2;
}

message ServersListRequest {
  string protocol = 1;
  int32 count = 2;
  string serverTag = 3;
}

message DisconnectRequest {
  int32 id = 2;
}

message GroupsRequest {
  ProtocolEnum protocol = 1;
  BooleanEnum obfuscate = 2;
}

message GroupsResponse {
  int32 type = 1;
  repeated string names = 2;
}

message LoginRequest {
  string username = 1;
  string password = 2;
}

message LoginOAuth2Response {
  string url = 1;
}

message String {
  google.protobuf.Any data = 1;
}

message LogoutRequest {
  int32 id = 2;
}

message Plan {
  string name = 1;
  string description = 2;
  string cost = 3;
  string currency = 4;
}

message PlansResponse {
  repeated Plan plans = 2;
}

message RateConnectionRequest {
  int32 rating = 1;
}

message RegisterRequest {
  string email = 1;
  string password = 2;
}

message SetGenericRequest {
  bool enabled = 1;
}

message SetCyberSecRequest {
  bool cyberSec = 2;
}

message SetDNSRequest {
  bool dns = 1;
  bool cyberSec = 2;
}

message SetKillSwitchRequest {
  bool enabled = 2;
}

message SetNotifyRequest {
  uint32 uid = 2;
  bool notify = 3;
}

message SetProtocolRequest {
  ProtocolEnum protocol = 2;
}

message SetTechnologyRequest {
  TechnologyEnum technology = 2;
}

message SetWhitelistRequest {
  optional int32 type = 1;
  Whitelist whitelist = 2;
}

message SettingsResponse {
  string type = 1;
  google.protobuf.Any data = 2;
}

message Settings {
  string technology = 1;
  bool firewall = 2;
  bool killSwitch = 3;
  bool autoConnect = 4;
  bool notify = 5;
  bool ipv6 = 6;
}

message StatusResponse {
  string state = 1;
  TechnologyEnum technology = 2;
  ProtocolEnum protocol = 3;
  string ip = 4;
  string hostname = 5;
  string country = 6;
  string city = 7;
  int64 download = 8;
  int64 upload = 9;
  int64 uptime = 10; // nanoseconds
}

enum TechnologyEnum {
  UNKNOWN_TECHNOLOGY = 0;
  OPENVPN = 1;
  NORDLYNX = 2;
  // SKYLARK = 3; Exists in codebase, but is not implemented
  // (Possible future technology?)
}

enum ProtocolEnum {
  UNKNOWN_PROTOCOL = 0;
  UDP = 1;
  TCP = 2;
}

enum AccountTypeEnum {
  ACTIVE = 0;
  INACTIVE = 1;
}

enum BooleanEnum {
  FALSE = 0;
  TRUE = 1;
}

// Undefined
message SettingsRequest { }
message AccountRequest { }

message SetAutoConnectRequest {
  string serverTag = 1;
  ProtocolEnum protocol = 2;
  BooleanEnum cyberSec = 3;
  BooleanEnum obfuscate = 4;
  BooleanEnum autoConnect = 5;
  BooleanEnum dns = 6;
  BooleanEnum whitelist = 7;
}